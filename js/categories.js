const CATEGORY_STORAGE_KEY = "categories";

let categories = [];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const categoryInput = document.querySelector(".categories .add__input");
const categoryList = document.querySelector(".categories .list__items");

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function countCategories() {
  const title = document.querySelector(".categories .list__title");
  if (title) {
    title.textContent = `–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (${categories.length})`;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ localStorage
function loadCategories() {
  const data = localStorage.getItem(CATEGORY_STORAGE_KEY);
  categories = data ? JSON.parse(data) : [];

  renderCategories();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
function saveCategories() {
  localStorage.setItem(CATEGORY_STORAGE_KEY, JSON.stringify(categories));
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId() {
  return Date.now().toString();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function addCategory(name) {
  if (!name.trim()) return;

  const newCategory = {
    id: generateId(),
    name,
    icon: "list.png", // –ü–æ–∫–∞ –æ–¥–Ω–∞ –∏–∫–æ–Ω–∫–∞, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
  };

  saveActiveItem("category");
  categories.push(newCategory);
  saveCategories();
  renderCategories();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function deleteCategory(id) {
  saveActiveItem("category");
  categories = categories.filter((category) => category.id !== id);
  saveCategories();
  renderCategories();
}

function moveCategory(id, direction) {
  saveActiveItem("category"); // ‚¨ÖÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –î–û render

  const index = categories.findIndex((c) => c.id === id);
  const swapWith = direction === "up" ? index - 1 : index + 1;
  if (index === -1 || swapWith < 0 || swapWith >= categories.length) return;

  const allItems = Array.from(
    document.querySelectorAll(".categories .list__item")
  );
  const positionsBefore = new Map();
  allItems.forEach((el) => {
    positionsBefore.set(el.dataset.id, el.getBoundingClientRect());
  });

  [categories[index], categories[swapWith]] = [
    categories[swapWith],
    categories[index],
  ];

  saveCategories();
  renderCategories(); // ‚¨ÖÔ∏è –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º DOM
  restoreActiveItem("category"); // ‚¨ÖÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

  const newItems = Array.from(
    document.querySelectorAll(".categories .list__item")
  );
  newItems.forEach((el) => {
    const id = el.dataset.id;
    const before = positionsBefore.get(id);
    if (!before) return;

    const after = el.getBoundingClientRect();
    const deltaY = before.top - after.top;

    el.style.transform = `translateY(${deltaY}px)`;
    el.style.transition = "none";

    requestAnimationFrame(() => {
      el.style.transform = `translateY(0)`;
      el.style.transition = "transform 300ms ease";
    });

    setTimeout(() => {
      el.style.transform = "";
    }, 300);
  });
}

function addCategoryActionListeners() {
  const editButtons = document.querySelectorAll(".list__action--edit");

  editButtons.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.stopPropagation(); // —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–¥–∞—á–∞–º

      const id = btn.dataset.id;
      const category = categories.find((c) => c.id === id);

      if (category) {
        openRenameModal(id, category.name, "category");
      }
    });
  });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderCategories() {
  categoryList.innerHTML = "";

  categories.forEach((category) => {
    const li = document.createElement("li");
    li.className = "list__item";

    if (category.id === window._activeCategoryId) {
      li.classList.add("list__item--active");
    }
    li.dataset.id = category.id;

    li.innerHTML = `
  <div class="list__item-inner">
    <button class="list__button" data-action="change" data-id="${category.id}">
      <img class="list__img" src="./assets/icons/categories/${category.icon}" alt="" />
    </button>
    <div class="list__text" tabindex="0" data-id="${category.id}">${category.name}</div>
    <button class="list__button" data-action="delete" data-id="${category.id}">
      <span class="list__delete"></span>
    </button>
  </div>
  <div class="list__actions">
    <button class="list__action list__action--edit" data-id="${category.id}"><img src="./assets/icons/rename.svg" alt="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"></button>
    <button class="list__action list__action--up" data-id="${category.id}"><img src="./assets/icons/arrow.svg" alt="–í–≤–µ—Ä—Ö"></button>
    <button class="list__action list__action--down" data-id="${category.id}"><img src="./assets/icons/arrow.svg" alt="–í–Ω–∏–∑"></button>
  </div>
`;

    categoryList.appendChild(li);
  });

  // –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ DOM)
  assignCategoryEvents();
  addSwipeListeners();
  addCategoryActionListeners();
  countCategories();
}

// –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –≤–≤–æ–¥
categoryInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter") {
    addCategory(categoryInput.value);
    categoryInput.value = "";
  }
});

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
function assignCategoryEvents() {
  document.querySelectorAll('[data-action="delete"]').forEach((btn) => {
    btn.addEventListener("click", () => {
      const id = btn.dataset.id;
      deleteCategory(id);
    });
  });

  document.querySelectorAll(".list__text").forEach((text) => {
    text.addEventListener("click", () => {
      const id = text.dataset.id;
      const category = categories.find((c) => c.id === id);
      if (category) {
        openTasksForCategory(id, category.name); // ‚¨ÖÔ∏è –ø–µ—Ä–µ–¥–∞—ë–º category.name
      }
    });
  });

  // üîº –í–≤–µ—Ä—Ö
  document.querySelectorAll(".list__action--up").forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.stopPropagation();
      const id = btn.dataset.id;
      moveCategory(id, "up");
    });
  });

  // üîΩ –í–Ω–∏–∑
  document.querySelectorAll(".list__action--down").forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.stopPropagation();
      const id = btn.dataset.id;
      moveCategory(id, "down");
    });
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadCategories();
